name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

env:
  REGISTRY: docker.io
  IMAGE_NAME: berkayb0306/nodejs-express-mysql-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Install Dependencies
        run: npm install
        
      - name: Run Tests
        run: npm test || echo "No tests specified"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Environment Variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
            echo "TAG=staging" >> $GITHUB_ENV
          fi

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      
      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_FILE }}" > kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
          
      - name: Update Application Image
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            kubectl set image deployment/nodejs-express-mysql nodejs-express-mysql=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} -n nodejs-express-mysql
          else
            kubectl set image deployment/nodejs-express-mysql nodejs-express-mysql=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} -n nodejs-express-mysql
          fi
          
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/nodejs-express-mysql -n nodejs-express-mysql --timeout=120s
